@model HomePageModel

@{
    ViewData["Title"] = Model.Title;
}

<article>
    <header class="text-center">
        <h2>Information</h2>
        <h4>Totla patients: @Model.PatientCount</h4>
    </header>
    <section>
        <section>
            <header class="text-center">
                <h4>CP files summary</h4>
            </header>
            <div>
                <canvas id="cp-planned-procedures">
                </canvas>
            </div>
            <div>
                <canvas id="cp-ins">
                </canvas>
            </div>
            <div>
                <canvas id="cp-outs">
                </canvas>
            </div>
            <div>
                <canvas id="cp-protocol-drug-therapies">
                </canvas>
            </div>
            <div>
                <canvas id="cp-patient-transfers">
                </canvas>
            </div>
        </section>
        <section>
            <header class="text-center">
                <h4>Hospital practices summary</h4>
            </header>
            <div>
                <canvas id="hospital-practice-clinic-procedures">
                </canvas>
            </div>
            <div>
                <canvas id="hospital-practice-path-procedures">
                </canvas>
            </div>
            <div>
                <canvas id="hospital-practice-disp-observations">
                </canvas>
            </div>
            <div>
                <canvas id="hospital-practice-commision-arps">
                </canvas>
            </div>
            <div>
                <canvas id="hospital-practice-drug-therapiest">
                </canvas>
            </div>
            <div>
                <canvas id="hospital-practice-patient-transfers">
                </canvas>
            </div>
        </section>
    </section>
</article>

@section Scripts {
    <environment names="Development">
        <script src="~/lib/chartjs/Chart.js"></script>
    </environment>
    <environment names="Production">
        <script src="~/lib/chartjs/Chart.min.js"></script>
    </environment>
    <script src="~/js/chart.js"></script>
    <script>
        window.addEventListener('load', (e) => {
            const labelsCP = @Html.Raw(Json.Serialize(Model.CPFileSummaryViewModels.Select(cp => cp.DateFrom.ToString("MM-yyyy"))));
            const labelsHP = @Html.Raw(Json.Serialize(Model.HospitalPracticeSummaryViewModels.Select(cp => cp.DateFrom.ToString("dd-MM-yyyy"))));

            const plannedProcedures = @Html.Raw(Json.Serialize(Model.CPFileSummaryViewModels.Select(cp => cp.PlannedProceduresCount)));
            const ins = @Html.Raw(Json.Serialize(Model.CPFileSummaryViewModels.Select(cp => cp.InsCount)));
            const outs = @Html.Raw(Json.Serialize(Model.CPFileSummaryViewModels.Select(cp => cp.OutsCount)));
            const protocolDrugTherapies = @Html.Raw(Json.Serialize(Model.CPFileSummaryViewModels.Select(cp => cp.ProtocolDrugTherapiesCount)));
            const patientTransfers = @Html.Raw(Json.Serialize(Model.CPFileSummaryViewModels.Select(cp => cp.PatientTransfersCount)));

            const inClinicProcedures = @Html.Raw(Json.Serialize(Model.HospitalPracticeSummaryViewModels.Select(hp => hp.InClinicProceduresCount)));
            const pathProcedures = @Html.Raw(Json.Serialize(Model.HospitalPracticeSummaryViewModels.Select(hp => hp.PathProceduresCount)));
            const dispObservations = @Html.Raw(Json.Serialize(Model.HospitalPracticeSummaryViewModels.Select(hp => hp.DispObservationsCount)));
            const commissionAprs = @Html.Raw(Json.Serialize(Model.HospitalPracticeSummaryViewModels.Select(hp => hp.CommissionAprsCount)));
            const protocolDrugHPTherapies = @Html.Raw(Json.Serialize(Model.HospitalPracticeSummaryViewModels.Select(hp => hp.ProtocolDrugTherapiesCount)));
            const patientHPTransfers = @Html.Raw(Json.Serialize(Model.HospitalPracticeSummaryViewModels.Select(hp => hp.PatientTransfersCount)));

            const ppData = {
                labels: labelsCP,
                datasets: [
                    {
                        label: 'Planned procedures',
                        data: plannedProcedures,
                        backgroundColor: "blue",
                        borderColor: "lightblue",
                        fill: false,
                        lineTension: 0,
                        radius: 5
                    }
                ]
            };

            const insData = {
                labels: labelsCP,
                datasets: [
                    {
                        label: 'Ins',
                        data: ins,
                        backgroundColor: "blue",
                        borderColor: "lightblue",
                        fill: false,
                        lineTension: 0,
                        radius: 5
                    }
                ]
            };

            const outsData = {
                labels: labelsCP,
                datasets: [
                    {
                        label: 'Outs',
                        data: outs,
                        backgroundColor: "blue",
                        borderColor: "lightblue",
                        fill: false,
                        lineTension: 0,
                        radius: 5
                    }
                ]
            };

            const protocolDrugTherapiesData = {
                labels: labelsCP,
                datasets: [
                    {
                        label: 'Protocol drug therapies',
                        data: protocolDrugTherapies,
                        backgroundColor: "blue",
                        borderColor: "lightblue",
                        fill: false,
                        lineTension: 0,
                        radius: 5
                    }
                ]
            };

            const patientTransfersData = {
                labels: labelsCP,
                datasets: [
                    {
                        label: 'Patient Transfers',
                        data: patientTransfers,
                        backgroundColor: "blue",
                        borderColor: "lightblue",
                        fill: false,
                        lineTension: 0,
                        radius: 5
                    }
                ]
            };

            const inClinicProceduresData = {
                labels: labelsHP,
                datasets: [
                    {
                        label: 'In clinic procedures',
                        data: inClinicProcedures,
                        backgroundColor: "blue",
                        borderColor: "lightblue",
                        fill: false,
                        lineTension: 0,
                        radius: 5
                    }
                ]
            };

            const pathProceduresData = {
                labels: labelsHP,
                datasets: [
                    {
                        label: 'Path procedure',
                        data: pathProcedures,
                        backgroundColor: "blue",
                        borderColor: "lightblue",
                        fill: false,
                        lineTension: 0,
                        radius: 5
                    }
                ]
            };

            const dispObservationsData = {
                labels: labelsHP,
                datasets: [
                    {
                        label: 'Disp observations',
                        data: dispObservations,
                        backgroundColor: "blue",
                        borderColor: "lightblue",
                        fill: false,
                        lineTension: 0,
                        radius: 5
                    }
                ]
            };

            const commissionAprsData = {
                labels: labelsHP,
                datasets: [
                    {
                        label: 'Commission aprs',
                        data: commissionAprs,
                        backgroundColor: "blue",
                        borderColor: "lightblue",
                        fill: false,
                        lineTension: 0,
                        radius: 5
                    }
                ]
            };

            const protocolDrugTherapiesHPData = {
                labels: labelsHP,
                datasets: [
                    {
                        label: 'Protocol drug pherapies',
                        data: protocolDrugHPTherapies,
                        backgroundColor: "blue",
                        borderColor: "lightblue",
                        fill: false,
                        lineTension: 0,
                        radius: 5
                    }
                ]
            };

            const patientTransfersHPData = {
                labels: labelsHP,
                datasets: [
                    {
                        label: 'Patient transfers',
                        data: patientHPTransfers,
                        backgroundColor: "blue",
                        borderColor: "lightblue",
                        fill: false,
                        lineTension: 0,
                        radius: 5
                    }
                ]
            };

            LineChart(document.querySelector('#cp-planned-procedures'), ppData, generateOptions('Planned procedures'));
            LineChart(document.querySelector('#cp-ins'), insData, generateOptions('Ins'));
            LineChart(document.querySelector('#cp-outs'), outsData, generateOptions('Outs'));
            LineChart(document.querySelector('#cp-protocol-drug-therapies'), protocolDrugTherapiesData, generateOptions('Protocol drug therapies'));
            LineChart(document.querySelector('#cp-patient-transfers'), patientTransfersData, generateOptions('Patient transfers'));

            LineChart(document.querySelector('#hospital-practice-clinic-procedures'), inClinicProceduresData, generateOptions('Clinic procedures'));
            LineChart(document.querySelector('#hospital-practice-path-procedures'), pathProceduresData, generateOptions('Path procedures'));
            LineChart(document.querySelector('#hospital-practice-disp-observations'), dispObservationsData, generateOptions('Disp observations'));
            LineChart(document.querySelector('#hospital-practice-commision-arps'), commissionAprsData, generateOptions('Commision arps'));
            LineChart(document.querySelector('#hospital-practice-drug-therapiest'), protocolDrugTherapiesHPData, generateOptions('Drug therapiest'));
            LineChart(document.querySelector('#hospital-practice-patient-transfers'), patientTransfersHPData, generateOptions('Patient transfers'));

            function generateOptions (text) {
                return options = {
                    responsive: true,
                    title: {
                        display: true,
                        position: "top",
                        text: text,
                        fontSize: 18,
                        fontColor: "#111"
                    }
                };
            }
        })
    </script>
}