@using System.Globalization

@model IndexPageModel

@{
    ViewData["Title"] = Model.Title;

    int pages = (Model.Count / 10) + 1;

    Dictionary<string, string> paramsByName = new Dictionary<string, string>();

    bool hasResults = Model != default && Model.Patients != default && Model.Patients.Count > 0;

    if (Model.Search != default)
    {
        if (!string.IsNullOrWhiteSpace(Model.Search.IdentityNumber))
        {
            paramsByName.Add($"{nameof(Model.Search)}.{nameof(Model.Search.IdentityNumber)}", Model.Search.IdentityNumber);
        }

        if (!string.IsNullOrWhiteSpace(Model.Search.FirstName))
        {
            paramsByName.Add($"{nameof(Model.Search)}.{nameof(Model.Search.FirstName)}", Model.Search.FirstName);
        }

        if (!string.IsNullOrWhiteSpace(Model.Search.SecondName))
        {
            paramsByName.Add($"{nameof(Model.Search)}.{nameof(Model.Search.SecondName)}", Model.Search.SecondName);
        }

        if (!string.IsNullOrWhiteSpace(Model.Search.LastName))
        {
            paramsByName.Add($"{nameof(Model.Search)}.{nameof(Model.Search.LastName)}", Model.Search.LastName);
        }

        if (Model.Search.BirthDate != null || Model.Search.BirthDate != default)
        {
            paramsByName.Add($"{nameof(Model.Search)}.{nameof(Model.Search.BirthDate)}", ((DateTime)Model.Search.BirthDate).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture));
        }
    }
}

<article>
    <header>
        <h3>Total patient count - @Model.Count</h3>
    </header>
    <section class="container">
        <form asp-controller="@MedicBaseController.GetName(nameof(PatientController))"
              asp-action="@nameof(PatientController.Index)"
              method="get">
            <div class="form-group">
                <label asp-for="@Model.Search.IdentityNumber"></label>
                <input class="form-control" asp-for="@Model.Search.IdentityNumber" />
            </div>
            <div class="form-group">
                <label asp-for="@Model.Search.FirstName"></label>
                <input class="form-control" asp-for="@Model.Search.FirstName" />
            </div>
            <div class="form-group">
                <label asp-for="@Model.Search.SecondName"></label>
                <input class="form-control" asp-for="@Model.Search.SecondName" />
            </div>
            <div class="form-group">
                <label asp-for="@Model.Search.LastName"></label>
                <input class="form-control" asp-for="@Model.Search.LastName" />
            </div>
            <div class="form-group">
                <label asp-for="@Model.Search.BirthDate"></label>
                <input type="date" class="form-control" asp-for="@Model.Search.BirthDate" />
            </div>
            <input type="submit" class="btn btn-primary" value="Search" />
            <input type="reset" class="btn btn-dark" value="Reset" />
        </form>
    </section>
    <section class="container mt-1">
        @if (hasResults)
        {
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th scope="col">First Name</th>
                        <th scope="col">Second Name</th>
                        <th scope="col">Last Name</th>
                        <th scope="col">Birth Date</th>
                        <th scope="col">View</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (PatientPreviewViewModel patient in Model.Patients)
                    {
                        <tr>
                            <td>@(string.IsNullOrWhiteSpace(patient.FirstName) ? "not specified" : patient.FirstName)</td>
                            <td>@(string.IsNullOrWhiteSpace(patient.LastName) ? "not specified" : patient.LastName)</td>
                            <td>@(string.IsNullOrWhiteSpace(patient.SecondName) ? "not specified" : patient.LastName)</td>
                            <td>@(patient.BirthDate.ToShortDateString() ?? "not specified")</td>
                            <td><a asp-controller="@MedicBaseController.GetName(nameof(PatientController))" 
                                   asp-action="@nameof(PatientController.Patient)"
                                   asp-route-id="@(patient.Id)" class="btn btn-info">View</a></td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <section class="text-info">No patients found.</section>
        }
    </section>
    @if (hasResults)
    {
        <footer>
            <nav class="btn-toolbar">
                <ul class="pagination">
                    @if (pages > 0)
                    {
                        if (Model.CurrentPage - 3 >= 1)
                        {
                            <li class="page-item">
                                <a asp-controller="@MedicBaseController.GetName(nameof(PatientController))"
                                   asp-action="@nameof(Index)"
                                   asp-all-route-data="@(new Dictionary<string, string>(paramsByName) { { "page", "1" } })"
                                   class="page-link">First</a>
                            </li>
                        }

                        if (Model.CurrentPage - 2 >= 1)
                        {
                            int twoPagesBefore = Model.CurrentPage - 2;

                            <li class="page-item">
                                <a asp-controller="@MedicBaseController.GetName(nameof(PatientController))"
                                   asp-action="@nameof(Index)"
                                   asp-all-route-data="@(new Dictionary<string, string>(paramsByName) { { "page", twoPagesBefore.ToString() } })"
                                   class="page-link">@twoPagesBefore</a>
                            </li>
                        }

                        if (Model.CurrentPage - 1 >= 1)
                        {
                            int onePageBefore = Model.CurrentPage - 1;

                            <li class="page-item">
                                <a asp-controller="@MedicBaseController.GetName(nameof(PatientController))"
                                   asp-action="@nameof(Index)"
                                   asp-all-route-data="@(new Dictionary<string, string>(paramsByName) { { "page", onePageBefore.ToString() } })"
                                   class="page-link">@onePageBefore</a>
                            </li>
                        }

                        <li class="page-item active">
                            <a asp-controller="@MedicBaseController.GetName(nameof(PatientController))"
                               asp-action="@nameof(Index)"
                               asp-all-route-data="@(new Dictionary<string, string>(paramsByName) { { "page", Model.CurrentPage.ToString() } })"
                               class="page-link">@Model.CurrentPage</a>
                        </li>

                        if (Model.CurrentPage + 1 <= pages)
                        {
                            int onePageAfter = Model.CurrentPage + 1;

                            <li class="page-item">
                                <a asp-controller="@MedicBaseController.GetName(nameof(PatientController))"
                                   asp-action="@nameof(Index)"
                                   asp-all-route-data="@(new Dictionary<string, string>(paramsByName) { { "page", onePageAfter.ToString() } })"
                                   class="page-link">@onePageAfter</a>
                            </li>
                        }

                        if (Model.CurrentPage + 2 <= pages)
                        {
                            int twoPagesAfter = Model.CurrentPage + 2;

                            <li class="page-item">
                                <a asp-controller="@MedicBaseController.GetName(nameof(PatientController))"
                                   asp-action="@nameof(Index)"
                                   asp-all-route-data="@(new Dictionary<string, string>(paramsByName) { { "page", twoPagesAfter.ToString() } })"
                                   class="page-link">@twoPagesAfter</a>
                            </li>
                        }

                        if (Model.CurrentPage + 3 <= pages)
                        {
                            <li class="page-item">
                                <a asp-controller="@MedicBaseController.GetName(nameof(PatientController))"
                                   asp-action="@nameof(Index)"
                                   asp-all-route-data="@(new Dictionary<string, string>(paramsByName) { { "page", pages.ToString() } })"
                                   class="page-link">Last</a>
                            </li>
                        }
                    }
                </ul>
            </nav>
        </footer>
    }
</article>