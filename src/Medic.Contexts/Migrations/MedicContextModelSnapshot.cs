// <auto-generated />
using System;
using Medic.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Medic.Contexts.Migrations
{
    [DbContext(typeof(MedicContext))]
    partial class MedicContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("mdc")
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Medic.Entities.APr05", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClinicChemotherapyPartId")
                        .HasColumnType("int");

                    b.Property<int?>("ClinicHematologyPartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DiagnoseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genetic")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<int>("HistologyId")
                        .HasColumnType("int");

                    b.Property<string>("Imuno")
                        .HasColumnType("nvarchar(3000)")
                        .HasMaxLength(3000);

                    b.Property<int>("NZOKPay")
                        .HasColumnType("int");

                    b.Property<int>("PrognosticGroup")
                        .HasColumnType("int");

                    b.Property<string>("Sign")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Staging")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("StagingNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClinicChemotherapyPartId");

                    b.HasIndex("ClinicHematologyPartId");

                    b.HasIndex("HistologyId");

                    b.ToTable("APr05s");
                });

            modelBuilder.Entity("Medic.Entities.APr38", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DecisionId")
                        .HasColumnType("int");

                    b.Property<string>("FairCondition")
                        .HasColumnType("nvarchar(4000)")
                        .HasMaxLength(4000);

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("History")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Therapy")
                        .HasColumnType("nvarchar(4000)")
                        .HasMaxLength(4000);

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DecisionId");

                    b.ToTable("APr38s");
                });

            modelBuilder.Entity("Medic.Entities.AccompanyingDrug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ATCCode")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("ATCName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<decimal>("AllDose")
                        .HasColumnType("decimal(12,4)");

                    b.Property<int?>("ProtocolDrugTherapyId")
                        .HasColumnType("int");

                    b.Property<decimal>("SingleDose")
                        .HasColumnType("decimal(12,4)");

                    b.Property<int?>("TherapyTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProtocolDrugTherapyId");

                    b.HasIndex("TherapyTypeId");

                    b.ToTable("AccompanyingDrugs");
                });

            modelBuilder.Entity("Medic.Entities.CPFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FileTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("PracticeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FileTypeId");

                    b.HasIndex("PracticeId");

                    b.ToTable("CPFiles");
                });

            modelBuilder.Entity("Medic.Entities.CeasedClinical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("IZMedicalWard")
                        .HasColumnType("int");

                    b.Property<int>("IZYearMedicalWard")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CeasedClinicals");
                });

            modelBuilder.Entity("Medic.Entities.ChemotherapyPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DiagnoseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ECOG")
                        .HasColumnType("int");

                    b.Property<int>("EvalAfterCycle")
                        .HasColumnType("int");

                    b.Property<int?>("EvaluationId")
                        .HasColumnType("int");

                    b.Property<string>("ExpandDiagnose")
                        .HasColumnType("nvarchar(4000)")
                        .HasMaxLength(4000);

                    b.Property<int?>("HistologyId")
                        .HasColumnType("int");

                    b.Property<int>("Interval")
                        .HasColumnType("int");

                    b.Property<int?>("ProtocolDrugTherapyId")
                        .HasColumnType("int");

                    b.Property<string>("Staging")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("StagingNumber")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TNM")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("TargetAUC")
                        .HasColumnType("decimal(15,4)");

                    b.Property<int>("TherapyType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationId");

                    b.HasIndex("HistologyId");

                    b.ToTable("ChemotherapyParts");
                });

            modelBuilder.Entity("Medic.Entities.Choice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Checked")
                        .HasColumnType("int");

                    b.Property<int?>("EvaluationId")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("EvaluationId");

                    b.ToTable("Choices");
                });

            modelBuilder.Entity("Medic.Entities.ClinicChemotherapyPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DecisionId")
                        .HasColumnType("int");

                    b.Property<int>("ECOG")
                        .HasColumnType("int");

                    b.Property<int?>("EvalutionId")
                        .HasColumnType("int");

                    b.Property<string>("TNM")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("DecisionId");

                    b.HasIndex("EvalutionId");

                    b.ToTable("ClinicChemotherapyParts");
                });

            modelBuilder.Entity("Medic.Entities.ClinicHematologyPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DecisionId")
                        .HasColumnType("int");

                    b.Property<int?>("EvalutionId")
                        .HasColumnType("int");

                    b.Property<int>("OngoingTherapy")
                        .HasColumnType("int");

                    b.Property<string>("StageHemo")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("DecisionId");

                    b.HasIndex("EvalutionId");

                    b.ToTable("ClinicHematologyParts");
                });

            modelBuilder.Entity("Medic.Entities.ClinicProcedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ACHIcode")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<int?>("InClinicProcedureId")
                        .HasColumnType("int");

                    b.Property<int?>("PathProcedureId")
                        .HasColumnType("int");

                    b.Property<decimal>("ProcedureCode")
                        .HasColumnType("decimal(15,4)");

                    b.Property<DateTime>("ProcedureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProcedureName")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.HasIndex("InClinicProcedureId");

                    b.HasIndex("PathProcedureId");

                    b.ToTable("ClinicProcedures");
                });

            modelBuilder.Entity("Medic.Entities.ClinicUsedDrug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatePrescr")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrugCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<decimal>("DrugCost")
                        .HasColumnType("decimal(15,4)");

                    b.Property<DateTime>("DrugDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrugName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<decimal>("DrugQuantity")
                        .HasColumnType("decimal(15,4)");

                    b.Property<string>("ICDDrug")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("NoPrescr")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int?>("PathProcedureId")
                        .HasColumnType("int");

                    b.Property<string>("PracticeCodeProtocol")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("ProtocolDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProtocolNumber")
                        .HasColumnType("int");

                    b.Property<int>("ProtocolType")
                        .HasColumnType("int");

                    b.Property<string>("UINPrescr")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("VersionCodeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PathProcedureId");

                    b.HasIndex("VersionCodeId");

                    b.ToTable("ClinicUsedDrugs");
                });

            modelBuilder.Entity("Medic.Entities.CommissionApr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("APr05Id")
                        .HasColumnType("int");

                    b.Property<int?>("APr38Id")
                        .HasColumnType("int");

                    b.Property<string>("AprPriem")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("AprSend")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int?>("ChairmanId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DecisionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HospitalPracticeId")
                        .HasColumnType("int");

                    b.Property<int?>("MainDiagId")
                        .HasColumnType("int");

                    b.Property<int>("NZOKPay")
                        .HasColumnType("int");

                    b.Property<int>("NoDecision")
                        .HasColumnType("int");

                    b.Property<int?>("PatientBranchId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientHRegionId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int");

                    b.Property<int>("Sign")
                        .HasColumnType("int");

                    b.Property<int>("SpecCommission")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("APr05Id");

                    b.HasIndex("APr38Id");

                    b.HasIndex("ChairmanId");

                    b.HasIndex("HospitalPracticeId");

                    b.HasIndex("MainDiagId");

                    b.HasIndex("PatientBranchId");

                    b.HasIndex("PatientHRegionId");

                    b.HasIndex("PatientId");

                    b.HasIndex("SenderId");

                    b.ToTable("CommissionAprs");
                });

            modelBuilder.Entity("Medic.Entities.CommissionAprHealthcarePractitioner", b =>
                {
                    b.Property<int>("HealthcarePractitionerId")
                        .HasColumnType("int");

                    b.Property<int>("CommissionAprId")
                        .HasColumnType("int");

                    b.HasKey("HealthcarePractitionerId", "CommissionAprId");

                    b.HasIndex("CommissionAprId");

                    b.ToTable("CommissionAprHealthcarePractitioner");
                });

            modelBuilder.Entity("Medic.Entities.Diag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChemotherapyPartId")
                        .HasColumnType("int");

                    b.Property<int?>("CommissionAprId")
                        .HasColumnType("int");

                    b.Property<string>("ImeMD")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("LinkDMKBCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("LinkDName")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("MKBCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("ChemotherapyPartId");

                    b.HasIndex("CommissionAprId");

                    b.HasIndex("LinkDMKBCode");

                    b.HasIndex("MKBCode");

                    b.ToTable("Diags");
                });

            modelBuilder.Entity("Medic.Entities.Diagnose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("InId")
                        .HasColumnType("int");

                    b.Property<int?>("OutId")
                        .HasColumnType("int");

                    b.Property<int?>("OutOutId")
                        .HasColumnType("int");

                    b.Property<int?>("PlannedId")
                        .HasColumnType("int");

                    b.Property<string>("PrimaryCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("SecondaryCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int?>("SendInId")
                        .HasColumnType("int");

                    b.Property<int?>("SendOutId")
                        .HasColumnType("int");

                    b.Property<int?>("SendPlannedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InId");

                    b.HasIndex("OutId");

                    b.HasIndex("OutOutId");

                    b.HasIndex("PlannedId");

                    b.HasIndex("PrimaryCode");

                    b.HasIndex("SecondaryCode");

                    b.HasIndex("SendInId");

                    b.HasIndex("SendOutId");

                    b.HasIndex("SendPlannedId");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("Medic.Entities.DispObservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Anamnesa")
                        .HasColumnType("nvarchar(4000)")
                        .HasMaxLength(4000);

                    b.Property<string>("AprCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("DiagDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DispDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DispNum")
                        .HasColumnType("int");

                    b.Property<int>("DispVisit")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DispanserDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("FirstCodeSpecConsult")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<string>("HState")
                        .HasColumnType("nvarchar(4000)")
                        .HasMaxLength(4000);

                    b.Property<int?>("HealthcarePractitionerId")
                        .HasColumnType("int");

                    b.Property<int?>("HospitalPracticeId")
                        .HasColumnType("int");

                    b.Property<int?>("MainDiagFirstId")
                        .HasColumnType("int");

                    b.Property<int?>("MainDiagSecondId")
                        .HasColumnType("int");

                    b.Property<int>("NZOKPay")
                        .HasColumnType("int");

                    b.Property<int?>("PatientBranchId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientHRegionId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("SecondCodeSpecConsult")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<int>("Sign")
                        .HasColumnType("int");

                    b.Property<string>("Therapy")
                        .HasColumnType("nvarchar(4000)")
                        .HasMaxLength(4000);

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("HealthcarePractitionerId");

                    b.HasIndex("HospitalPracticeId");

                    b.HasIndex("MainDiagFirstId");

                    b.HasIndex("MainDiagSecondId");

                    b.HasIndex("PatientBranchId");

                    b.HasIndex("PatientHRegionId");

                    b.HasIndex("PatientId");

                    b.ToTable("DispObservations");
                });

            modelBuilder.Entity("Medic.Entities.DoneProcedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("PathProcedureId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProcedureEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcedureStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PathProcedureId");

                    b.ToTable("DoneProcedures");
                });

            modelBuilder.Entity("Medic.Entities.DrugPack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BatchNumber")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int>("CPFileId")
                        .HasColumnType("int");

                    b.Property<string>("DrugCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("DrugDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DrugQuantity")
                        .HasColumnType("decimal(15,4)");

                    b.Property<string>("ExpireDateAsString")
                        .HasColumnType("nvarchar(6)")
                        .HasMaxLength(6);

                    b.Property<int>("HospitalPracticeId")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("CPFileId");

                    b.HasIndex("HospitalPracticeId");

                    b.ToTable("DrugPacks");
                });

            modelBuilder.Entity("Medic.Entities.DrugProtocol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ATCCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("ATCName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<decimal>("AllDose")
                        .HasColumnType("decimal(15,4)");

                    b.Property<string>("ApplicationWay")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<decimal>("CycleDose")
                        .HasColumnType("decimal(15,4)");

                    b.Property<string>("Days")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<decimal>("IndividualDose")
                        .HasColumnType("decimal(15,4)");

                    b.Property<int?>("NumberOfDays")
                        .HasColumnType("int");

                    b.Property<int?>("ProtocolDrugTherapyId")
                        .HasColumnType("int");

                    b.Property<decimal>("StandartDose")
                        .HasColumnType("decimal(15,4)");

                    b.Property<int?>("TherapyTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProtocolDrugTherapyId");

                    b.HasIndex("TherapyTypeId");

                    b.ToTable("DrugProtocols");
                });

            modelBuilder.Entity("Medic.Entities.DrugResidue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BatchNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("CPFileId")
                        .HasColumnType("int");

                    b.Property<string>("DrugCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("DrugCost")
                        .HasColumnType("decimal(15,4)");

                    b.Property<DateTime?>("DrugDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HospitalPracticeId")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(15,4)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("CPFileId");

                    b.HasIndex("HospitalPracticeId");

                    b.ToTable("DrugResidues");
                });

            modelBuilder.Entity("Medic.Entities.Epicrisis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CheckupAfterDischarge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClinicalExaminations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Consultations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfSurgery")
                        .HasColumnType("datetime2");

                    b.Property<string>("DischargeStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiseaseCourse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorsNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FairCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GPRecommendations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("History")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherDocuments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostoperativeStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recommendations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Regimen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SampleProtocol")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Epicrises");
                });

            modelBuilder.Entity("Medic.Entities.Evaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("Medic.Entities.FileType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("FileTypes");
                });

            modelBuilder.Entity("Medic.Entities.GenMarker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChemotherapyPartId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Sign")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChemotherapyPartId");

                    b.ToTable("GenMarkers");
                });

            modelBuilder.Entity("Medic.Entities.HealthRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("HealthRegions");
                });

            modelBuilder.Entity("Medic.Entities.HealthcarePractitioner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClinicalNumber")
                        .HasColumnType("int");

                    b.Property<string>("DeputyUniqueIdentifier")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<int?>("HealthRegionId")
                        .HasColumnType("int");

                    b.Property<string>("NZOKCode")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int?>("PracticeId")
                        .HasColumnType("int");

                    b.Property<int?>("SenderTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("SpecialityId")
                        .HasColumnType("int");

                    b.Property<string>("UINSubst")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<string>("UniqueIdentifier")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.HasKey("Id");

                    b.HasIndex("HealthRegionId");

                    b.HasIndex("PracticeId");

                    b.HasIndex("SenderTypeId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("HealthcarePractitioners");
                });

            modelBuilder.Entity("Medic.Entities.HematologyPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PredMarkerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PredMarkerId");

                    b.ToTable("HematologyParts");
                });

            modelBuilder.Entity("Medic.Entities.HistologicalResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("HistologicalResults");
                });

            modelBuilder.Entity("Medic.Entities.Histology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodeHS")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("NameHS")
                        .HasColumnType("nvarchar(4000)")
                        .HasMaxLength(4000);

                    b.HasKey("Id");

                    b.ToTable("Histologies");
                });

            modelBuilder.Entity("Medic.Entities.HospitalPractice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("FileTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("HealthRegionId")
                        .HasColumnType("int");

                    b.Property<int>("PracticeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FileTypeId");

                    b.HasIndex("HealthRegionId");

                    b.HasIndex("PracticeId");

                    b.ToTable("HospitalPractices");
                });

            modelBuilder.Entity("Medic.Entities.Implant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClinicProcedureId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DistributorInvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DistributorInvoiceNumber")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<decimal>("NhifAmount")
                        .HasColumnType("decimal(15,4)");

                    b.Property<decimal>("PatientAmount")
                        .HasColumnType("decimal(15,4)");

                    b.Property<int?>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Stickers")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(15,4)");

                    b.Property<string>("TradeName")
                        .HasColumnType("nvarchar(600)")
                        .HasMaxLength(600);

                    b.HasKey("Id");

                    b.HasIndex("ClinicProcedureId");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Implants");
                });

            modelBuilder.Entity("Medic.Entities.ImplantProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ImplantProductTypes");
                });

            modelBuilder.Entity("Medic.Entities.In", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AgeInDays")
                        .HasColumnType("int");

                    b.Property<int?>("BirthWeight")
                        .HasColumnType("int");

                    b.Property<int?>("CPFileId")
                        .HasColumnType("int");

                    b.Property<string>("ClinicalPath")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int?>("Delay")
                        .HasColumnType("int");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExaminationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IZNo")
                        .HasColumnType("int");

                    b.Property<int?>("IZYear")
                        .HasColumnType("int");

                    b.Property<string>("InAPr")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("InMedicalWard")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("InType")
                        .HasColumnType("int");

                    b.Property<int?>("MotherIZNo")
                        .HasColumnType("int");

                    b.Property<int?>("MotherIZYear")
                        .HasColumnType("int");

                    b.Property<int>("NZOKPay")
                        .HasColumnType("int");

                    b.Property<int?>("PackageType")
                        .HasColumnType("int");

                    b.Property<int?>("PatientBranchId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientHRegionId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Payer")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PlannedEntryDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PlannedNumber")
                        .HasColumnType("int");

                    b.Property<string>("SendAPr")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("SendClinicalPath")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SendPackageType")
                        .HasColumnType("int");

                    b.Property<int>("SendUrgency")
                        .HasColumnType("int");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<string>("UniqueIdentifier")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<int>("Urgency")
                        .HasColumnType("int");

                    b.Property<int?>("WeightInGrams")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CPFileId");

                    b.HasIndex("PatientBranchId");

                    b.HasIndex("PatientHRegionId");

                    b.HasIndex("PatientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Ins");
                });

            modelBuilder.Entity("Medic.Entities.InClinicProcedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("APrPriem")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("APrSend")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CPrPriem")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CPrSend")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int?>("CeasedClinicalPathId")
                        .HasColumnType("int");

                    b.Property<int?>("CeasedOnlyId")
                        .HasColumnType("int");

                    b.Property<int?>("CeasedProcedureId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateSend")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FirstMainDiagId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstVisitDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HospitalPracticeId")
                        .HasColumnType("int");

                    b.Property<int?>("IZNumChild")
                        .HasColumnType("int");

                    b.Property<int>("IZYearChild")
                        .HasColumnType("int");

                    b.Property<int>("NZOKPay")
                        .HasColumnType("int");

                    b.Property<int?>("PackageType")
                        .HasColumnType("int");

                    b.Property<int?>("PatientBranchId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientHealthRegionId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("PatientStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PlanVisitDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PlannedNumber")
                        .HasColumnType("int");

                    b.Property<int>("ProcRefuse")
                        .HasColumnType("int");

                    b.Property<int?>("SecondMainDiagId")
                        .HasColumnType("int");

                    b.Property<int?>("SendPackageType")
                        .HasColumnType("int");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeProcPriem")
                        .HasColumnType("int");

                    b.Property<int?>("TypeProcSend")
                        .HasColumnType("int");

                    b.Property<string>("VisitDoctorName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("VisitDoctorUniqueIdentifier")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.HasKey("Id");

                    b.HasIndex("CeasedClinicalPathId");

                    b.HasIndex("CeasedOnlyId");

                    b.HasIndex("CeasedProcedureId");

                    b.HasIndex("FirstMainDiagId");

                    b.HasIndex("HospitalPracticeId");

                    b.HasIndex("PatientBranchId");

                    b.HasIndex("PatientHealthRegionId");

                    b.HasIndex("PatientId");

                    b.HasIndex("SecondMainDiagId")
                        .IsUnique()
                        .HasFilter("[SecondMainDiagId] IS NOT NULL");

                    b.HasIndex("SenderId");

                    b.ToTable("InClinicProcedures");
                });

            modelBuilder.Entity("Medic.Entities.MDI", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ACHIcode")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<int>("DispObservationId")
                        .HasColumnType("int");

                    b.Property<decimal?>("MDICode")
                        .HasColumnType("decimal(15,4)");

                    b.Property<string>("MDIName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("DispObservationId");

                    b.ToTable("MDIs");
                });

            modelBuilder.Entity("Medic.Entities.MKB", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.HasKey("Code");

                    b.HasIndex("Name");

                    b.ToTable("MKBs");
                });

            modelBuilder.Entity("Medic.Entities.Marker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EvaluationId")
                        .HasColumnType("int");

                    b.Property<int?>("GenMarkerId")
                        .HasColumnType("int");

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.Property<int>("Sign")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationId");

                    b.HasIndex("GenMarkerId");

                    b.ToTable("Markers");
                });

            modelBuilder.Entity("Medic.Entities.Out", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AgeInDays")
                        .HasColumnType("int");

                    b.Property<int?>("BedDays")
                        .HasColumnType("int");

                    b.Property<int?>("BirthGestWeek")
                        .HasColumnType("int");

                    b.Property<int?>("BirthNumber")
                        .HasColumnType("int");

                    b.Property<string>("BirthPractice")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<int?>("BirthWeight")
                        .HasColumnType("int");

                    b.Property<int?>("CPFileId")
                        .HasColumnType("int");

                    b.Property<string>("ClinicalPath")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int?>("DeadId")
                        .HasColumnType("int");

                    b.Property<int?>("Delay")
                        .HasColumnType("int");

                    b.Property<int?>("EndCourse")
                        .HasColumnType("int");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EpicrisisId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExaminationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("HLDateFrom")
                        .HasColumnType("datetime2");

                    b.Property<string>("HLNumber")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<int?>("HLTotalDays")
                        .HasColumnType("int");

                    b.Property<int?>("HistologicalResultId")
                        .HasColumnType("int");

                    b.Property<int?>("IZNo")
                        .HasColumnType("int");

                    b.Property<int?>("IZYear")
                        .HasColumnType("int");

                    b.Property<string>("IZinDetail")
                        .HasColumnType("nvarchar(4000)")
                        .HasMaxLength(4000);

                    b.Property<string>("InAPr")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("InMedicalWard")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("InType")
                        .HasColumnType("int");

                    b.Property<int?>("Laparoscopic")
                        .HasColumnType("int");

                    b.Property<string>("LinkMedia")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("MotherIZNo")
                        .HasColumnType("int");

                    b.Property<int?>("MotherIZYear")
                        .HasColumnType("int");

                    b.Property<int>("NZOKPay")
                        .HasColumnType("int");

                    b.Property<string>("OutAPr")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("OutClinicalPath")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("OutDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OutMainDiagnoseId")
                        .HasColumnType("int");

                    b.Property<string>("OutMedicalWard")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("OutType")
                        .HasColumnType("int");

                    b.Property<string>("OutUniqueIdentifier")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<int?>("PackageType")
                        .HasColumnType("int");

                    b.Property<int?>("PathologicFinding")
                        .HasColumnType("int");

                    b.Property<int?>("PatientBranchId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientHRegionId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Payer")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PlannedEntryDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PlannedNumber")
                        .HasColumnType("int");

                    b.Property<int?>("RedirectedId")
                        .HasColumnType("int");

                    b.Property<int?>("ResignId")
                        .HasColumnType("int");

                    b.Property<string>("SendAPr")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("SendClinicalPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SendPackageType")
                        .HasColumnType("int");

                    b.Property<int>("SendUrgency")
                        .HasColumnType("int");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int");

                    b.Property<int?>("Severity")
                        .HasColumnType("int");

                    b.Property<int?>("StateAtDischarge")
                        .HasColumnType("int");

                    b.Property<string>("UniqueIdentifier")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<int>("Urgency")
                        .HasColumnType("int");

                    b.Property<int?>("WeightInGrams")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CPFileId");

                    b.HasIndex("DeadId");

                    b.HasIndex("EpicrisisId");

                    b.HasIndex("HistologicalResultId");

                    b.HasIndex("OutMainDiagnoseId");

                    b.HasIndex("PatientBranchId");

                    b.HasIndex("PatientHRegionId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RedirectedId");

                    b.HasIndex("ResignId");

                    b.HasIndex("SenderId");

                    b.ToTable("Outs");
                });

            modelBuilder.Entity("Medic.Entities.PathProcedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("APrPriem")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("APrSend")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int?>("AllDays")
                        .HasColumnType("int");

                    b.Property<int?>("AllDoneProcedures")
                        .HasColumnType("int");

                    b.Property<decimal?>("AllDrugCost")
                        .HasColumnType("decimal(15,4)");

                    b.Property<int?>("BirthGestWeek")
                        .HasColumnType("int");

                    b.Property<int?>("BirthNumber")
                        .HasColumnType("int");

                    b.Property<string>("BirthPractice")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CPrPriem")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CPrSend")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int?>("CeasedClinicalPathId")
                        .HasColumnType("int");

                    b.Property<int?>("CeasedOnlyId")
                        .HasColumnType("int");

                    b.Property<int?>("CeasedProcedureId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DatePlanPriem")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateProcedureBegins")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateProcedureEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateSend")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EndCourse")
                        .HasColumnType("int");

                    b.Property<int?>("FirstMainDiagId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstVisitDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HospitalPracticeId")
                        .HasColumnType("int");

                    b.Property<string>("IZNumChild")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<int>("IZYearChild")
                        .HasColumnType("int");

                    b.Property<string>("MedicalWard")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("NZOKPay")
                        .HasColumnType("int");

                    b.Property<string>("OutUniqueIdentifier")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<int?>("PackageType")
                        .HasColumnType("int");

                    b.Property<int?>("PatientBranchId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientHRegionId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("PatientStatus")
                        .HasColumnType("int");

                    b.Property<int?>("PlannedNumber")
                        .HasColumnType("int");

                    b.Property<int>("ProcRefuse")
                        .HasColumnType("int");

                    b.Property<string>("RedirectedClinicalPath")
                        .HasColumnType("nvarchar(6)")
                        .HasMaxLength(6);

                    b.Property<string>("RedirectedProc")
                        .HasColumnType("nvarchar(4)")
                        .HasMaxLength(4);

                    b.Property<int?>("SecondMainDiagId")
                        .HasColumnType("int");

                    b.Property<int?>("SendPackageType")
                        .HasColumnType("int");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int");

                    b.Property<int>("Sign")
                        .HasColumnType("int");

                    b.Property<int>("TypeProcPriem")
                        .HasColumnType("int");

                    b.Property<int>("TypeProcSend")
                        .HasColumnType("int");

                    b.Property<string>("VisitDoctorName")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("VisitDoctorUniqueIdentifier")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.HasKey("Id");

                    b.HasIndex("CeasedClinicalPathId");

                    b.HasIndex("CeasedOnlyId");

                    b.HasIndex("CeasedProcedureId");

                    b.HasIndex("FirstMainDiagId");

                    b.HasIndex("HospitalPracticeId");

                    b.HasIndex("PatientBranchId");

                    b.HasIndex("PatientHRegionId");

                    b.HasIndex("PatientId");

                    b.HasIndex("SecondMainDiagId");

                    b.HasIndex("SenderId");

                    b.ToTable("PathProcedures");
                });

            modelBuilder.Entity("Medic.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CertificateType")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateIssue")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("EhicC")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("IdentityNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("InstitutionId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("InstitutionName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LNCH")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LeadDocName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NAPNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("PersonType")
                        .HasColumnType("int");

                    b.Property<string>("PersonalIdNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("SexId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdentityNumber");

                    b.HasIndex("SexId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Medic.Entities.PatientBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HealthRegionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HealthRegionId");

                    b.ToTable("PatientBranches");
                });

            modelBuilder.Entity("Medic.Entities.Planned", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CPFileId")
                        .HasColumnType("int");

                    b.Property<string>("ClinicalPath")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("ExaminationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InAPr")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("InType")
                        .HasColumnType("int");

                    b.Property<int>("NZOKPay")
                        .HasColumnType("int");

                    b.Property<int?>("PackageType")
                        .HasColumnType("int");

                    b.Property<int?>("PatientBranchId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientHRegionId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PlannedEntryDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PlannedNumber")
                        .HasColumnType("int");

                    b.Property<string>("SendAPr")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("SendClinicalPath")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SendPackageType")
                        .HasColumnType("int");

                    b.Property<int>("SendUrgency")
                        .HasColumnType("int");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int");

                    b.Property<string>("UniqueIdentifier")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<int>("Urgency")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CPFileId");

                    b.HasIndex("PatientBranchId");

                    b.HasIndex("PatientHRegionId");

                    b.HasIndex("PatientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Plannings");
                });

            modelBuilder.Entity("Medic.Entities.Practice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("Branch")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<int?>("HealthRegionId")
                        .HasColumnType("int");

                    b.Property<string>("NZOKCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.HasKey("Id");

                    b.HasIndex("HealthRegionId");

                    b.ToTable("Practices");
                });

            modelBuilder.Entity("Medic.Entities.Procedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ACHICode")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<int?>("BedDays")
                        .HasColumnType("int");

                    b.Property<decimal>("Code")
                        .HasColumnType("decimal(15,4)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EndCourse")
                        .HasColumnType("int");

                    b.Property<DateTime?>("HLDateFrom")
                        .HasColumnType("datetime2");

                    b.Property<string>("HLNumber")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<int?>("HLTotalDays")
                        .HasColumnType("int");

                    b.Property<int?>("ImplantId")
                        .HasColumnType("int");

                    b.Property<string>("InAPr")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<int?>("Laparoscopic")
                        .HasColumnType("int");

                    b.Property<int>("OutHospital")
                        .HasColumnType("int");

                    b.Property<int?>("OutId")
                        .HasColumnType("int");

                    b.Property<int?>("PathProcedureId")
                        .HasColumnType("int");

                    b.Property<int?>("PathologicFinding")
                        .HasColumnType("int");

                    b.Property<string>("SendAPr")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<int?>("StateAtDischarge")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImplantId");

                    b.HasIndex("OutId");

                    b.HasIndex("PathProcedureId");

                    b.ToTable("Procedures");
                });

            modelBuilder.Entity("Medic.Entities.ProtocolDrugTherapy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("BSA")
                        .HasColumnType("float");

                    b.Property<int?>("CPFileId")
                        .HasColumnType("int");

                    b.Property<int?>("ChairmanId")
                        .HasColumnType("int");

                    b.Property<int?>("ChemotherapyPartId")
                        .HasColumnType("int");

                    b.Property<int>("CycleCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("DecisionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DiagId")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int?>("HematologyPartId")
                        .HasColumnType("int");

                    b.Property<int?>("HospitalPracticeId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfDecision")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfProtocol")
                        .HasColumnType("int");

                    b.Property<int?>("PatientBranchId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientHRegionId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PracticeCodeProtocol")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<int?>("PracticeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProtocolDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Scheme")
                        .HasColumnType("nvarchar(4000)")
                        .HasMaxLength(4000);

                    b.Property<int>("Sign")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTreatment")
                        .HasColumnType("datetime2");

                    b.Property<int>("TherapyLine")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CPFileId");

                    b.HasIndex("ChairmanId");

                    b.HasIndex("ChemotherapyPartId");

                    b.HasIndex("DiagId");

                    b.HasIndex("HematologyPartId");

                    b.HasIndex("HospitalPracticeId");

                    b.HasIndex("PatientBranchId");

                    b.HasIndex("PatientHRegionId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PracticeId");

                    b.ToTable("ProtocolDrugTherapies");
                });

            modelBuilder.Entity("Medic.Entities.ProtocolDrugTherapyHealthPractitioner", b =>
                {
                    b.Property<int>("HealthcarePractitionerId")
                        .HasColumnType("int");

                    b.Property<int>("ProtocolDrugTherapyId")
                        .HasColumnType("int");

                    b.HasKey("HealthcarePractitionerId", "ProtocolDrugTherapyId");

                    b.HasIndex("ProtocolDrugTherapyId");

                    b.ToTable("ProtocolDrugTherapyHealthPractitioner");
                });

            modelBuilder.Entity("Medic.Entities.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("Medic.Entities.Redirected", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DiagnoseId")
                        .HasColumnType("int");

                    b.Property<int?>("PracticeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiagnoseId");

                    b.HasIndex("PracticeId");

                    b.ToTable("Redirects");
                });

            modelBuilder.Entity("Medic.Entities.Resign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(4000)")
                        .HasMaxLength(4000);

                    b.Property<int>("OutRefuse")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Resigners");
                });

            modelBuilder.Entity("Medic.Entities.SenderType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name");

                    b.ToTable("SenderTypes");
                });

            modelBuilder.Entity("Medic.Entities.Sex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Sexes");
                });

            modelBuilder.Entity("Medic.Entities.SpecialtyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("SpecialtyCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.HasIndex("SpecialtyCode")
                        .IsUnique()
                        .HasFilter("[SpecialtyCode] IS NOT NULL");

                    b.ToTable("SpecialtyTypes");
                });

            modelBuilder.Entity("Medic.Entities.TherapyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("TherapyTypes");
                });

            modelBuilder.Entity("Medic.Entities.Transfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AmbulatoryProcedure")
                        .HasColumnType("nvarchar(4)")
                        .HasMaxLength(4);

                    b.Property<int?>("CPFileId")
                        .HasColumnType("int");

                    b.Property<int>("CashPatient")
                        .HasColumnType("int");

                    b.Property<double>("ClinicalPath")
                        .HasColumnType("float");

                    b.Property<int>("ClinicalProcedure")
                        .HasColumnType("int");

                    b.Property<string>("DischargeWard")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<int?>("FirstMainDiagId")
                        .HasColumnType("int");

                    b.Property<int?>("HospitalPracticeId")
                        .HasColumnType("int");

                    b.Property<int>("IZNumber")
                        .HasColumnType("int");

                    b.Property<int>("IZYear")
                        .HasColumnType("int");

                    b.Property<int?>("SecondMainDiagId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TransferDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransferWard")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.HasIndex("CPFileId");

                    b.HasIndex("FirstMainDiagId");

                    b.HasIndex("HospitalPracticeId");

                    b.HasIndex("SecondMainDiagId");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("Medic.Entities.UsedDrug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(15,4)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatePrescr")
                        .HasColumnType("datetime2");

                    b.Property<string>("ICDDrug")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("NoPrescr")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("OutId")
                        .HasColumnType("int");

                    b.Property<string>("PracticeCodeProtocol")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<DateTime>("ProtocolDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProtocolNumber")
                        .HasColumnType("int");

                    b.Property<int>("ProtocolType")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(15,4)");

                    b.Property<string>("UINPrescr")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int?>("VersionCodeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OutId");

                    b.HasIndex("VersionCodeId");

                    b.ToTable("UsedDrugs");
                });

            modelBuilder.Entity("Medic.Entities.VSD", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ACHIcode")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<string>("CodeVSD")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<int>("DispObservationId")
                        .HasColumnType("int");

                    b.Property<string>("NameVSD")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("DispObservationId");

                    b.ToTable("VSDs");
                });

            modelBuilder.Entity("Medic.Entities.VersionCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BatchNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("DataMatrix")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(14)")
                        .HasMaxLength(14);

                    b.Property<decimal>("QuantityPack")
                        .HasColumnType("decimal(15,4)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("VersionCodes");
                });

            modelBuilder.Entity("Medic.Entities.APr05", b =>
                {
                    b.HasOne("Medic.Entities.ClinicChemotherapyPart", "ClinicChemotherapyPart")
                        .WithMany("APr05s")
                        .HasForeignKey("ClinicChemotherapyPartId");

                    b.HasOne("Medic.Entities.ClinicHematologyPart", "ClinicHematologyPart")
                        .WithMany("APr05s")
                        .HasForeignKey("ClinicHematologyPartId");

                    b.HasOne("Medic.Entities.Histology", "Histology")
                        .WithOne("APr05")
                        .HasForeignKey("Medic.Entities.APr05", "HistologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Medic.Entities.APr38", b =>
                {
                    b.HasOne("Medic.Entities.Evaluation", "Decision")
                        .WithOne("APr38s")
                        .HasForeignKey("Medic.Entities.APr38", "DecisionId");
                });

            modelBuilder.Entity("Medic.Entities.AccompanyingDrug", b =>
                {
                    b.HasOne("Medic.Entities.ProtocolDrugTherapy", "ProtocolDrugTherapy")
                        .WithMany("AccompanyingDrugs")
                        .HasForeignKey("ProtocolDrugTherapyId");

                    b.HasOne("Medic.Entities.TherapyType", "TherapyType")
                        .WithMany("AccompanyingDrugs")
                        .HasForeignKey("TherapyTypeId");
                });

            modelBuilder.Entity("Medic.Entities.CPFile", b =>
                {
                    b.HasOne("Medic.Entities.FileType", "FileType")
                        .WithMany("CPFiles")
                        .HasForeignKey("FileTypeId");

                    b.HasOne("Medic.Entities.Practice", "Practice")
                        .WithMany("CPFiles")
                        .HasForeignKey("PracticeId");
                });

            modelBuilder.Entity("Medic.Entities.ChemotherapyPart", b =>
                {
                    b.HasOne("Medic.Entities.Evaluation", "Evaluation")
                        .WithOne("ChemotherapyPart")
                        .HasForeignKey("Medic.Entities.ChemotherapyPart", "EvaluationId");

                    b.HasOne("Medic.Entities.Histology", "Histology")
                        .WithMany("ChemotherapyParts")
                        .HasForeignKey("HistologyId");
                });

            modelBuilder.Entity("Medic.Entities.Choice", b =>
                {
                    b.HasOne("Medic.Entities.Evaluation", "Evaluation")
                        .WithMany("Choices")
                        .HasForeignKey("EvaluationId");
                });

            modelBuilder.Entity("Medic.Entities.ClinicChemotherapyPart", b =>
                {
                    b.HasOne("Medic.Entities.Evaluation", "Decision")
                        .WithOne("ClinicChemotherapyPartDecision")
                        .HasForeignKey("Medic.Entities.ClinicChemotherapyPart", "DecisionId");

                    b.HasOne("Medic.Entities.Evaluation", "Evaluation")
                        .WithOne("ClinicChemotherapyPart")
                        .HasForeignKey("Medic.Entities.ClinicChemotherapyPart", "EvalutionId");
                });

            modelBuilder.Entity("Medic.Entities.ClinicHematologyPart", b =>
                {
                    b.HasOne("Medic.Entities.Evaluation", "Decision")
                        .WithOne("ClinicHematologyPartDecision")
                        .HasForeignKey("Medic.Entities.ClinicHematologyPart", "DecisionId");

                    b.HasOne("Medic.Entities.Evaluation", "Evaluation")
                        .WithOne("ClinicHematologyPart")
                        .HasForeignKey("Medic.Entities.ClinicHematologyPart", "EvalutionId");
                });

            modelBuilder.Entity("Medic.Entities.ClinicProcedure", b =>
                {
                    b.HasOne("Medic.Entities.InClinicProcedure", "InClinicProcedure")
                        .WithMany("Procedures")
                        .HasForeignKey("InClinicProcedureId");

                    b.HasOne("Medic.Entities.PathProcedure", "PathProcedure")
                        .WithMany("ClinicProcedures")
                        .HasForeignKey("PathProcedureId");
                });

            modelBuilder.Entity("Medic.Entities.ClinicUsedDrug", b =>
                {
                    b.HasOne("Medic.Entities.PathProcedure", "PathProcedure")
                        .WithMany("UsedDrugs")
                        .HasForeignKey("PathProcedureId");

                    b.HasOne("Medic.Entities.VersionCode", "VersionCode")
                        .WithOne("ClinicUsedDrug")
                        .HasForeignKey("Medic.Entities.ClinicUsedDrug", "VersionCodeId");
                });

            modelBuilder.Entity("Medic.Entities.CommissionApr", b =>
                {
                    b.HasOne("Medic.Entities.APr05", "APr05")
                        .WithOne("CommissionApr")
                        .HasForeignKey("Medic.Entities.CommissionApr", "APr05Id");

                    b.HasOne("Medic.Entities.APr38", "APr38")
                        .WithOne("CommissionApr")
                        .HasForeignKey("Medic.Entities.CommissionApr", "APr38Id");

                    b.HasOne("Medic.Entities.HealthcarePractitioner", "Chairman")
                        .WithMany("ChairmanOfCommissionAprs")
                        .HasForeignKey("ChairmanId");

                    b.HasOne("Medic.Entities.HospitalPractice", "HospitalPractice")
                        .WithMany("CommissionAprs")
                        .HasForeignKey("HospitalPracticeId");

                    b.HasOne("Medic.Entities.Diag", "MainDiag")
                        .WithOne("CommissionAprMain")
                        .HasForeignKey("Medic.Entities.CommissionApr", "MainDiagId");

                    b.HasOne("Medic.Entities.PatientBranch", "PatientBranch")
                        .WithMany("CommissionAprs")
                        .HasForeignKey("PatientBranchId");

                    b.HasOne("Medic.Entities.HealthRegion", "PatientHRegion")
                        .WithMany("CommissionAprs")
                        .HasForeignKey("PatientHRegionId");

                    b.HasOne("Medic.Entities.Patient", "Patient")
                        .WithMany("CommissionAprs")
                        .HasForeignKey("PatientId");

                    b.HasOne("Medic.Entities.HealthcarePractitioner", "Sender")
                        .WithMany("CommissionAprs")
                        .HasForeignKey("SenderId");
                });

            modelBuilder.Entity("Medic.Entities.CommissionAprHealthcarePractitioner", b =>
                {
                    b.HasOne("Medic.Entities.CommissionApr", "CommissionApr")
                        .WithMany("Members")
                        .HasForeignKey("CommissionAprId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medic.Entities.HealthcarePractitioner", "HealthcarePractitioner")
                        .WithMany("CommissionAprsMembers")
                        .HasForeignKey("HealthcarePractitionerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Medic.Entities.Diag", b =>
                {
                    b.HasOne("Medic.Entities.ChemotherapyPart", "ChemotherapyPart")
                        .WithMany("AddDiags")
                        .HasForeignKey("ChemotherapyPartId");

                    b.HasOne("Medic.Entities.CommissionApr", "CommissionApr")
                        .WithMany("AddDiags")
                        .HasForeignKey("CommissionAprId");

                    b.HasOne("Medic.Entities.MKB", "LinkDMKB")
                        .WithMany("LinkedDiags")
                        .HasForeignKey("LinkDMKBCode");

                    b.HasOne("Medic.Entities.MKB", "MKB")
                        .WithMany("Diags")
                        .HasForeignKey("MKBCode");
                });

            modelBuilder.Entity("Medic.Entities.Diagnose", b =>
                {
                    b.HasOne("Medic.Entities.In", "In")
                        .WithMany("Diagnoses")
                        .HasForeignKey("InId");

                    b.HasOne("Medic.Entities.Out", "Out")
                        .WithMany("Diagnoses")
                        .HasForeignKey("OutId");

                    b.HasOne("Medic.Entities.Out", "OutOut")
                        .WithMany("OutDiagnoses")
                        .HasForeignKey("OutOutId");

                    b.HasOne("Medic.Entities.Planned", "Planned")
                        .WithMany("Diagnoses")
                        .HasForeignKey("PlannedId");

                    b.HasOne("Medic.Entities.MKB", "Primary")
                        .WithMany("PrimaryDiagnoses")
                        .HasForeignKey("PrimaryCode");

                    b.HasOne("Medic.Entities.MKB", "Secondary")
                        .WithMany("SecondaryDiagnoses")
                        .HasForeignKey("SecondaryCode");

                    b.HasOne("Medic.Entities.In", "SendIn")
                        .WithMany("SendDiagnoses")
                        .HasForeignKey("SendInId");

                    b.HasOne("Medic.Entities.Out", "SendOut")
                        .WithMany("SendDiagnoses")
                        .HasForeignKey("SendOutId");

                    b.HasOne("Medic.Entities.Planned", "SendPlanned")
                        .WithMany("SendDiagnoses")
                        .HasForeignKey("SendPlannedId");
                });

            modelBuilder.Entity("Medic.Entities.DispObservation", b =>
                {
                    b.HasOne("Medic.Entities.HealthcarePractitioner", "Doctor")
                        .WithMany("DoctorDispObservations")
                        .HasForeignKey("DoctorId");

                    b.HasOne("Medic.Entities.HealthcarePractitioner", null)
                        .WithMany("DispObservations")
                        .HasForeignKey("HealthcarePractitionerId");

                    b.HasOne("Medic.Entities.HospitalPractice", "HospitalPractice")
                        .WithMany("DispObservations")
                        .HasForeignKey("HospitalPracticeId");

                    b.HasOne("Medic.Entities.Diag", "FirstMainDiag")
                        .WithOne("FirstDispObservation")
                        .HasForeignKey("Medic.Entities.DispObservation", "MainDiagFirstId");

                    b.HasOne("Medic.Entities.Diag", "SecondMainDiag")
                        .WithOne("SecondDispObservation")
                        .HasForeignKey("Medic.Entities.DispObservation", "MainDiagSecondId");

                    b.HasOne("Medic.Entities.PatientBranch", "PatientBranch")
                        .WithMany("DispObservations")
                        .HasForeignKey("PatientBranchId");

                    b.HasOne("Medic.Entities.HealthRegion", "PatientHRegion")
                        .WithMany("DispObservations")
                        .HasForeignKey("PatientHRegionId");

                    b.HasOne("Medic.Entities.Patient", "Patient")
                        .WithMany("DispObservations")
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("Medic.Entities.DoneProcedure", b =>
                {
                    b.HasOne("Medic.Entities.HealthcarePractitioner", "Doctor")
                        .WithMany("DoneProcedures")
                        .HasForeignKey("DoctorId");

                    b.HasOne("Medic.Entities.PathProcedure", "PathProcedure")
                        .WithMany("DoneProcedures")
                        .HasForeignKey("PathProcedureId");
                });

            modelBuilder.Entity("Medic.Entities.DrugPack", b =>
                {
                    b.HasOne("Medic.Entities.CPFile", "CPFile")
                        .WithMany("DrugPacks")
                        .HasForeignKey("CPFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medic.Entities.HospitalPractice", "HospitalPractice")
                        .WithMany("DrugPacks")
                        .HasForeignKey("HospitalPracticeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Medic.Entities.DrugProtocol", b =>
                {
                    b.HasOne("Medic.Entities.ProtocolDrugTherapy", "ProtocolDrugTherapy")
                        .WithMany("DrugProtocols")
                        .HasForeignKey("ProtocolDrugTherapyId");

                    b.HasOne("Medic.Entities.TherapyType", "TherapyType")
                        .WithMany("DrugProtocols")
                        .HasForeignKey("TherapyTypeId");
                });

            modelBuilder.Entity("Medic.Entities.DrugResidue", b =>
                {
                    b.HasOne("Medic.Entities.CPFile", "CPFile")
                        .WithMany("DrugResidues")
                        .HasForeignKey("CPFileId");

                    b.HasOne("Medic.Entities.HospitalPractice", "HospitalPractice")
                        .WithMany("DrugResidues")
                        .HasForeignKey("HospitalPracticeId");
                });

            modelBuilder.Entity("Medic.Entities.GenMarker", b =>
                {
                    b.HasOne("Medic.Entities.ChemotherapyPart", "ChemotherapyPart")
                        .WithMany("GenMarkers")
                        .HasForeignKey("ChemotherapyPartId");
                });

            modelBuilder.Entity("Medic.Entities.HealthcarePractitioner", b =>
                {
                    b.HasOne("Medic.Entities.HealthRegion", "HealthRegion")
                        .WithMany("HealthcarePractitioners")
                        .HasForeignKey("HealthRegionId");

                    b.HasOne("Medic.Entities.Practice", "Practice")
                        .WithMany("HealthcarePractitioners")
                        .HasForeignKey("PracticeId");

                    b.HasOne("Medic.Entities.SenderType", "SenderType")
                        .WithMany("HealthcarePractitioners")
                        .HasForeignKey("SenderTypeId");

                    b.HasOne("Medic.Entities.SpecialtyType", "Speciality")
                        .WithMany("HealthcarePractitioners")
                        .HasForeignKey("SpecialityId");
                });

            modelBuilder.Entity("Medic.Entities.HematologyPart", b =>
                {
                    b.HasOne("Medic.Entities.Evaluation", "PredMarker")
                        .WithOne("HematologyPart")
                        .HasForeignKey("Medic.Entities.HematologyPart", "PredMarkerId");
                });

            modelBuilder.Entity("Medic.Entities.HospitalPractice", b =>
                {
                    b.HasOne("Medic.Entities.FileType", "FileType")
                        .WithMany("HospitalPractice")
                        .HasForeignKey("FileTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medic.Entities.HealthRegion", "HealthRegion")
                        .WithMany("HospitalPractices")
                        .HasForeignKey("HealthRegionId");

                    b.HasOne("Medic.Entities.Practice", "Practice")
                        .WithMany("HospitalPractices")
                        .HasForeignKey("PracticeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Medic.Entities.Implant", b =>
                {
                    b.HasOne("Medic.Entities.ClinicProcedure", "ClinicProcedure")
                        .WithMany("Implants")
                        .HasForeignKey("ClinicProcedureId");

                    b.HasOne("Medic.Entities.ImplantProductType", "ProductType")
                        .WithMany("Implants")
                        .HasForeignKey("ProductTypeId");

                    b.HasOne("Medic.Entities.Provider", "Provider")
                        .WithMany("Implants")
                        .HasForeignKey("ProviderId");
                });

            modelBuilder.Entity("Medic.Entities.In", b =>
                {
                    b.HasOne("Medic.Entities.CPFile", "CPFile")
                        .WithMany("Ins")
                        .HasForeignKey("CPFileId");

                    b.HasOne("Medic.Entities.PatientBranch", "PatientBranch")
                        .WithMany("Ins")
                        .HasForeignKey("PatientBranchId");

                    b.HasOne("Medic.Entities.HealthRegion", "PatientHRegion")
                        .WithMany("Ins")
                        .HasForeignKey("PatientHRegionId");

                    b.HasOne("Medic.Entities.Patient", "Patient")
                        .WithMany("Ins")
                        .HasForeignKey("PatientId");

                    b.HasOne("Medic.Entities.HealthcarePractitioner", "Sender")
                        .WithMany("Ins")
                        .HasForeignKey("SenderId");
                });

            modelBuilder.Entity("Medic.Entities.InClinicProcedure", b =>
                {
                    b.HasOne("Medic.Entities.CeasedClinical", "CeasedClinicalPath")
                        .WithOne("CeasedClinicalPathInClinicProcedure")
                        .HasForeignKey("Medic.Entities.InClinicProcedure", "CeasedClinicalPathId");

                    b.HasOne("Medic.Entities.CeasedClinical", "CeasedOnly")
                        .WithOne("CeasedOnlyInClinicProcedure")
                        .HasForeignKey("Medic.Entities.InClinicProcedure", "CeasedOnlyId");

                    b.HasOne("Medic.Entities.CeasedClinical", "CeasedProcedure")
                        .WithOne("CeasedProcedureInClinicProcedure")
                        .HasForeignKey("Medic.Entities.InClinicProcedure", "CeasedProcedureId");

                    b.HasOne("Medic.Entities.Diag", "FirstMainDiag")
                        .WithOne("FirstInClinicProcedure")
                        .HasForeignKey("Medic.Entities.InClinicProcedure", "FirstMainDiagId");

                    b.HasOne("Medic.Entities.HospitalPractice", "HospitalPractice")
                        .WithMany("InClinicProcedures")
                        .HasForeignKey("HospitalPracticeId");

                    b.HasOne("Medic.Entities.PatientBranch", "PatientBranch")
                        .WithMany("InClinicProcedures")
                        .HasForeignKey("PatientBranchId");

                    b.HasOne("Medic.Entities.HealthRegion", "PatientHealthRegion")
                        .WithMany("InClinicProcedures")
                        .HasForeignKey("PatientHealthRegionId");

                    b.HasOne("Medic.Entities.Patient", "Patient")
                        .WithMany("InClinicProcedures")
                        .HasForeignKey("PatientId");

                    b.HasOne("Medic.Entities.Diag", "SecondMainDiag")
                        .WithOne("SecondInClinicProcedure")
                        .HasForeignKey("Medic.Entities.InClinicProcedure", "SecondMainDiagId");

                    b.HasOne("Medic.Entities.HealthcarePractitioner", "Sender")
                        .WithMany("InClinicProcedures")
                        .HasForeignKey("SenderId");
                });

            modelBuilder.Entity("Medic.Entities.MDI", b =>
                {
                    b.HasOne("Medic.Entities.DispObservation", "DispObservation")
                        .WithMany("MDIs")
                        .HasForeignKey("DispObservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Medic.Entities.Marker", b =>
                {
                    b.HasOne("Medic.Entities.Evaluation", "Evaluation")
                        .WithMany("Markers")
                        .HasForeignKey("EvaluationId");

                    b.HasOne("Medic.Entities.GenMarker", "GenMarker")
                        .WithMany("Markers")
                        .HasForeignKey("GenMarkerId");
                });

            modelBuilder.Entity("Medic.Entities.Out", b =>
                {
                    b.HasOne("Medic.Entities.CPFile", "CPFile")
                        .WithMany("Outs")
                        .HasForeignKey("CPFileId");

                    b.HasOne("Medic.Entities.Diagnose", "Dead")
                        .WithOne("OutDead")
                        .HasForeignKey("Medic.Entities.Out", "DeadId");

                    b.HasOne("Medic.Entities.Epicrisis", "Epicrisis")
                        .WithOne("Out")
                        .HasForeignKey("Medic.Entities.Out", "EpicrisisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medic.Entities.HistologicalResult", "HistologicalResult")
                        .WithOne("Out")
                        .HasForeignKey("Medic.Entities.Out", "HistologicalResultId");

                    b.HasOne("Medic.Entities.Diagnose", "OutMainDiagnose")
                        .WithOne("OutMain")
                        .HasForeignKey("Medic.Entities.Out", "OutMainDiagnoseId");

                    b.HasOne("Medic.Entities.PatientBranch", "PatientBranch")
                        .WithMany("Outs")
                        .HasForeignKey("PatientBranchId");

                    b.HasOne("Medic.Entities.HealthRegion", "PatientHRegion")
                        .WithMany("Outs")
                        .HasForeignKey("PatientHRegionId");

                    b.HasOne("Medic.Entities.Patient", "Patient")
                        .WithMany("Outs")
                        .HasForeignKey("PatientId");

                    b.HasOne("Medic.Entities.Redirected", "Redirected")
                        .WithOne("Out")
                        .HasForeignKey("Medic.Entities.Out", "RedirectedId");

                    b.HasOne("Medic.Entities.Resign", "Resign")
                        .WithOne("Out")
                        .HasForeignKey("Medic.Entities.Out", "ResignId");

                    b.HasOne("Medic.Entities.HealthcarePractitioner", "Sender")
                        .WithMany("Outs")
                        .HasForeignKey("SenderId");
                });

            modelBuilder.Entity("Medic.Entities.PathProcedure", b =>
                {
                    b.HasOne("Medic.Entities.CeasedClinical", "CeasedClinicalPath")
                        .WithOne("PathProcedurePath")
                        .HasForeignKey("Medic.Entities.PathProcedure", "CeasedClinicalPathId");

                    b.HasOne("Medic.Entities.CeasedClinical", "CeasedOnly")
                        .WithOne("CeasedOnlyPathProcedure")
                        .HasForeignKey("Medic.Entities.PathProcedure", "CeasedOnlyId");

                    b.HasOne("Medic.Entities.CeasedClinical", "CeasedProcedure")
                        .WithOne("PathProcedure")
                        .HasForeignKey("Medic.Entities.PathProcedure", "CeasedProcedureId");

                    b.HasOne("Medic.Entities.Diag", "FirstMainDiag")
                        .WithOne("FirstPathProcedure")
                        .HasForeignKey("Medic.Entities.PathProcedure", "FirstMainDiagId");

                    b.HasOne("Medic.Entities.HospitalPractice", "HospitalPractice")
                        .WithMany("PathProcedures")
                        .HasForeignKey("HospitalPracticeId");

                    b.HasOne("Medic.Entities.PatientBranch", "PatientBranch")
                        .WithMany("PathProcedures")
                        .HasForeignKey("PatientBranchId");

                    b.HasOne("Medic.Entities.HealthRegion", "PatientHRegion")
                        .WithMany("PathProcedures")
                        .HasForeignKey("PatientHRegionId");

                    b.HasOne("Medic.Entities.Patient", "Patient")
                        .WithMany("PathProcedures")
                        .HasForeignKey("PatientId");

                    b.HasOne("Medic.Entities.Diag", "SecondMainDiag")
                        .WithOne("SecondPathProcedure")
                        .HasForeignKey("Medic.Entities.PathProcedure", "SecondMainDiagId");

                    b.HasOne("Medic.Entities.HealthcarePractitioner", "Sender")
                        .WithMany("PathProcedures")
                        .HasForeignKey("SenderId");
                });

            modelBuilder.Entity("Medic.Entities.Patient", b =>
                {
                    b.HasOne("Medic.Entities.Sex", "Sex")
                        .WithMany("Patients")
                        .HasForeignKey("SexId");
                });

            modelBuilder.Entity("Medic.Entities.PatientBranch", b =>
                {
                    b.HasOne("Medic.Entities.HealthRegion", "HealthRegion")
                        .WithMany("PatientBranches")
                        .HasForeignKey("HealthRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Medic.Entities.Planned", b =>
                {
                    b.HasOne("Medic.Entities.CPFile", "CPFile")
                        .WithMany("Plannings")
                        .HasForeignKey("CPFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medic.Entities.PatientBranch", "PatientBranch")
                        .WithMany("Planned")
                        .HasForeignKey("PatientBranchId");

                    b.HasOne("Medic.Entities.HealthRegion", "PatientHRegion")
                        .WithMany("Planned")
                        .HasForeignKey("PatientHRegionId");

                    b.HasOne("Medic.Entities.Patient", "Patient")
                        .WithMany("Plannings")
                        .HasForeignKey("PatientId");

                    b.HasOne("Medic.Entities.HealthcarePractitioner", "Sender")
                        .WithMany("Planned")
                        .HasForeignKey("SenderId");
                });

            modelBuilder.Entity("Medic.Entities.Practice", b =>
                {
                    b.HasOne("Medic.Entities.HealthRegion", "HealthRegion")
                        .WithOne("Practice")
                        .HasForeignKey("Medic.Entities.Practice", "HealthRegionId");
                });

            modelBuilder.Entity("Medic.Entities.Procedure", b =>
                {
                    b.HasOne("Medic.Entities.Implant", "Implant")
                        .WithOne("Procedure")
                        .HasForeignKey("Medic.Entities.Procedure", "ImplantId");

                    b.HasOne("Medic.Entities.Out", "Out")
                        .WithMany("Procedures")
                        .HasForeignKey("OutId");

                    b.HasOne("Medic.Entities.PathProcedure", "PathProcedure")
                        .WithMany("DoneNewProcedures")
                        .HasForeignKey("PathProcedureId");
                });

            modelBuilder.Entity("Medic.Entities.ProtocolDrugTherapy", b =>
                {
                    b.HasOne("Medic.Entities.CPFile", "CPFile")
                        .WithMany("ProtocolDrugTherapies")
                        .HasForeignKey("CPFileId");

                    b.HasOne("Medic.Entities.HealthcarePractitioner", "Chairman")
                        .WithMany("ProtocolDrugTherapiesAsChairman")
                        .HasForeignKey("ChairmanId");

                    b.HasOne("Medic.Entities.ChemotherapyPart", "ChemotherapyPart")
                        .WithOne("ProtocolDrugTherapy")
                        .HasForeignKey("Medic.Entities.ProtocolDrugTherapy", "ChemotherapyPartId");

                    b.HasOne("Medic.Entities.Diag", "Diag")
                        .WithOne("ProtocolDrugTherapy")
                        .HasForeignKey("Medic.Entities.ProtocolDrugTherapy", "DiagId");

                    b.HasOne("Medic.Entities.HematologyPart", "HematologyPart")
                        .WithOne("ProtocolDrugTherapy")
                        .HasForeignKey("Medic.Entities.ProtocolDrugTherapy", "HematologyPartId");

                    b.HasOne("Medic.Entities.HospitalPractice", "HospitalPractice")
                        .WithMany("ProtocolDrugTherapies")
                        .HasForeignKey("HospitalPracticeId");

                    b.HasOne("Medic.Entities.PatientBranch", "PatientBranch")
                        .WithMany("ProtocolDrugTherapies")
                        .HasForeignKey("PatientBranchId");

                    b.HasOne("Medic.Entities.HealthRegion", "PatientHRegion")
                        .WithMany("ProtocolDrugTherapies")
                        .HasForeignKey("PatientHRegionId");

                    b.HasOne("Medic.Entities.Patient", "Patient")
                        .WithMany("ProtocolDrugTherapies")
                        .HasForeignKey("PatientId");

                    b.HasOne("Medic.Entities.Practice", "Practice")
                        .WithMany()
                        .HasForeignKey("PracticeId");
                });

            modelBuilder.Entity("Medic.Entities.ProtocolDrugTherapyHealthPractitioner", b =>
                {
                    b.HasOne("Medic.Entities.HealthcarePractitioner", "HealthcarePractitioner")
                        .WithMany("ProtocolDrugTherapies")
                        .HasForeignKey("HealthcarePractitionerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medic.Entities.ProtocolDrugTherapy", "ProtocolDrugTherapy")
                        .WithMany("Members")
                        .HasForeignKey("ProtocolDrugTherapyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Medic.Entities.Redirected", b =>
                {
                    b.HasOne("Medic.Entities.Diagnose", "Diagnose")
                        .WithOne("Redirected")
                        .HasForeignKey("Medic.Entities.Redirected", "DiagnoseId");

                    b.HasOne("Medic.Entities.Practice", "Practice")
                        .WithOne("Redirected")
                        .HasForeignKey("Medic.Entities.Redirected", "PracticeId");
                });

            modelBuilder.Entity("Medic.Entities.Transfer", b =>
                {
                    b.HasOne("Medic.Entities.CPFile", "CPFile")
                        .WithMany("Transfers")
                        .HasForeignKey("CPFileId");

                    b.HasOne("Medic.Entities.Diag", "FirstMainDiag")
                        .WithOne("FirstPatientTransfer")
                        .HasForeignKey("Medic.Entities.Transfer", "FirstMainDiagId");

                    b.HasOne("Medic.Entities.HospitalPractice", "HospitalPractice")
                        .WithMany("Transfers")
                        .HasForeignKey("HospitalPracticeId");

                    b.HasOne("Medic.Entities.Diag", "SecondMainDiag")
                        .WithOne("SecondPatientTransfer")
                        .HasForeignKey("Medic.Entities.Transfer", "SecondMainDiagId");
                });

            modelBuilder.Entity("Medic.Entities.UsedDrug", b =>
                {
                    b.HasOne("Medic.Entities.Out", "Out")
                        .WithMany("UsedDrugs")
                        .HasForeignKey("OutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medic.Entities.VersionCode", "VersionCode")
                        .WithMany()
                        .HasForeignKey("VersionCodeId");
                });

            modelBuilder.Entity("Medic.Entities.VSD", b =>
                {
                    b.HasOne("Medic.Entities.DispObservation", "DispObservation")
                        .WithMany("VSDs")
                        .HasForeignKey("DispObservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
